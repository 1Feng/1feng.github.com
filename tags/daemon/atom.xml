<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: daemon | 1Feng's Blog]]></title>
  <link href="http://1feng.github.io/tags/daemon/atom.xml" rel="self"/>
  <link href="http://1feng.github.io/"/>
  <updated>2016-09-17T21:08:08+08:00</updated>
  <id>http://1feng.github.io/</id>
  <author>
    <name><![CDATA[Travis Swicegood]]></name>
    <email><![CDATA[codingforfan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何实现一个daemon]]></title>
    <link href="http://1feng.github.io/2014/11/29/daemon-ho-to/"/>
    <updated>2014-11-29T16:46:00+08:00</updated>
    <id>http://1feng.github.io/2014/11/29/daemon-ho-to</id>
    <content type="html"><![CDATA[<p>Linux下经常需要将服务程序实现为<strong>daemon</strong>（<strong>守护进程</strong>）。从而完成后台运行，开机启动，关机正常结束的功能。</p>

<hr />

<h3>需求：</h3>

<ul>
<li><strong>后台运行</strong> ：摆脱tty控制</li>
<li><strong>根目录运行</strong> ：切换工作目录至(/)，防止机器重启工作目录处于Unmount状态，导致进程无法正常工作</li>
<li><strong>标准io重定向</strong> ：重定向stdin,stdout,stderr</li>
<li><strong>文件创建模式</strong> ：提高创建文件权限</li>
<li><strong>屏蔽/接管信号</strong> ： 屏蔽或者接管部分signals处理</li>
<li><strong>Single instance</strong> ： 可选</li>
<li><strong>开机启动</strong> ：可选</li>
</ul>


<h3>How to:</h3>

<h4>修改文件创建模式屏蔽字</h4>

<ul>
<li>umask(0) : 将文件创建模式屏蔽字设置为0</li>
</ul>


<h4>摆脱tty</h4>

<ul>
<li>fork 并退出父进程（子进程不是session leader，为setsid创造条件）</li>
<li>调用setsid，使子进程成为session leader，同时成为一个process group leader，此时已摆脱tty</li>
<li>再次fork，并退出父进程，摆脱session leader，从而避免进程取得tty控制权限。（如果每次open /dev/tty* 的时候都使用O_NOCTTY, 则该步骤可以取消）</li>
</ul>


<h4>写并锁定pidfile</h4>

<ul>
<li>锁定pidfile，并将pid写入pidfile，如果pidfile已经存在，说明实例已经启动</li>
</ul>


<h4>切换目录</h4>

<ul>
<li>cddir("/")</li>
</ul>


<h4>屏蔽signals</h4>

<p>－ 屏蔽或者后续自己写代码处理相应signals(nohup 无法完成该任务)</p>

<h4>重定向标准io</h4>

<ul>
<li>可以选择关闭或者重定向标准io到指定文件</li>
</ul>


<h4>开机启动</h4>

<ul>
<li>参考/etc/init.d/skeleton 实现启动/停止脚本, 并使用update-rc.d添加为启动项</li>
</ul>


<h3>Code example:</h3>

<p>``` cpp</p>

<p> bool DaemonInit()
 {</p>

<pre><code>/* Our process ID and Session ID */
pid_t pid, sid;

/* Change the file mode mask */
umask(0);

/* Fork off the parent process */
pid = fork();
if (pid &lt; 0)
{
    std::cerr &lt;&lt; "First fock failed!" &lt;&lt; std::endl;;
    return false;
}
/* If we got a good PID, then
 * we can exit the parent process. */
if (pid &gt; 0)
{
    sleep(1);
    exit(EXIT_SUCCESS);
}

/* Create a new SID for the child process */
sid = setsid();
if (sid &lt; 0)
{
    std::cerr &lt;&lt; "Setsid failed!" &lt;&lt; std::endl;;
    return false;
}

/* Fork off the second time */
pid = fork();
if (pid &lt; 0)
{
    std::cerr &lt;&lt; "Second fork failed!" &lt;&lt; std::endl;;
    return false;
}
/* If we got a good PID, then
 * we can exit the parent process. */
if (pid &gt; 0)
{
    exit(EXIT_SUCCESS);
}

/* Ignore signals */
signal(SIGCHLD, SIG_IGN);
signal(SIGHUP, SIG_IGN);

 /* Change the current working directory */
if ((chdir("/")) &lt; 0) {
  return false;
}

//需保证 pid_fd 生命周期与进程生命周期一致
int pid_fd = open("/var/run/daemon_example.pid", O_RDWR|O_CREAT, 0640);
if ( pid_fd &lt; 0)
{
    //std::cerr &lt;&lt; "Can not open " &lt;&lt; pidfile_ &lt;&lt; std::endl;
    return false;
}
if (lockf(fd_, F_TLOCK, 0) &lt; 0)
{
    //std::cerr &lt;&lt; "Another instance is running!" &lt;&lt; std::endl;;
    return false;
}
/*write and lock pid file*/
std::stringstream stream;
stream &lt;&lt; getpid() &lt;&lt; '\n';
std::string pidstr = stream.str();
ssize_t len = write(fd_, pidstr.c_str(), pidstr.length());
if(len &lt; 0)
{
    //std::cerr &lt;&lt; "Write to /var/run/daemon_example.pid failed!"
    //          &lt;&lt; std::endl;;
    return false;
}

/* Close out the standard file descriptors */
if(close(STDIN_FILENO) == -1)
{
    //std::cerr &lt;&lt; "Can not close STDIN_FILENO!" &lt;&lt; std::endl;
    return false;
}
if(close(STDOUT_FILENO) == -1)
{
    //std::cerr &lt;&lt; "Can not close STDOUT_FILENO!" &lt;&lt; std::endl;
    return false;
}
if(close(STDERR_FILENO)  == -1)
{
    //std::cerr &lt;&lt; "Can not close STDERR_FILENO!" &lt;&lt; std::endl;
    return false;
}
/*redirect standard output*/
//需保证 output_fd 生命周期与进程生命周期一致
int output_fd = open(DEV_NULL, O_RDWR, 0);
if(output_fd == -1)
{
  return false;
}
if(dup2(output_fd, STDIN_FILENO) == -1)
{
  return false;
}
if(dup2(output_fd, STDOUT_FILENO) == -1)
{
  return false;
}
if(dup2(output_fd, STDERR_FILENO) == -1)
{
  return false;
}
return true;
</code></pre>

<p>}
```</p>

<h3>参考</h3>

<ol>
<li><a href="http://www.apuebook.com/">《APUE》 Chapter 13</a></li>
<li><a href="http://netzmafia.de/skripten/unix/linux-daemon-howto.html">Daemon how to</a></li>
<li><a href="https://stackoverflow.com/questions/17954432/creting-a-daemon-in-linux">Creating a daemon in Linux</a></li>
<li><a href="https://stackoverflow.com/questions/958249/whats-the-difference-between-nohup-and-a-daemon">What's the difference between nohup and a daemon?</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
