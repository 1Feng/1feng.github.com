<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: std::bind | 1Feng's Blog]]></title>
  <link href="http://erenno1.github.com/tags/std-bind/atom.xml" rel="self"/>
  <link href="http://erenno1.github.com/"/>
  <updated>2014-11-29T23:52:17+08:00</updated>
  <id>http://erenno1.github.com/</id>
  <author>
    <name><![CDATA[Travis Swicegood]]></name>
    <email><![CDATA[codingforfan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[函数对象与std::bind]]></title>
    <link href="http://erenno1.github.com/2014/04/27/std-bind-in-c-plus-plus/"/>
    <updated>2014-04-27T14:51:00+08:00</updated>
    <id>http://erenno1.github.com/2014/04/27/std-bind-in-c-plus-plus</id>
    <content type="html"><![CDATA[<hr />

<h3>函数指针</h3>

<p>主要有以下两类：</p>

<ol>
<li>一般函数指针（普通函数指针 and static 成员函数指针）</li>
<li>非static成员函数指针</li>
</ol>


<h4>一般函数指针</h4>

<h5>初始化</h5>

<p>普通函数指针</p>

<blockquote><p>func_type func = function_name;</p></blockquote>

<p>or</p>

<blockquote><p>func_type func = &amp;function_name;</p></blockquote>

<p>static 成员函数指针</p>

<blockquote><p>func_type func = ClassName::function_name;</p></blockquote>

<p>or</p>

<blockquote><p>func_type func = &amp;ClassName::function_name;</p></blockquote>

<h5>调用</h5>

<blockquote><p>function_name(arg);</p></blockquote>

<p>or</p>

<blockquote><p>(*function_name)(arg);</p></blockquote>

<p><em>注：同数组名类似，对函数名而言 functin_name 和 &amp;function_name 是一样的，即地址相同，所以，上述的两种写法都可以</em></p>

<h4>对于类的非static成员函数指针</h4>

<h5>初始化</h5>

<blockquote><p>func_type func = &amp;function_name;</p></blockquote>

<h5>调用</h5>

<blockquote><p>(obj.*func)(arg);</p></blockquote>

<p>即，非static成员函数在初始化时，必须以&amp;的方式避免歧义，否则编译会报错为 <code>invalid use of non-static member function</code></p>

<hr />

<h3>函数对象</h3>

<p>C++推荐使用函数对象（仿函数）来替代函数指针，这样可以避免指针操作带来的繁琐，切可以维护数据，使函数带有自己的状态
函数对象主要通过重载operator()来实现，例如：
``` cpp
struct Max
 {
   Max() : times()
   {
   }
   int operator()(int a, int b)
   {</p>

<pre><code> std::cout &lt;&lt; "Called " &lt;&lt; ++times &lt;&lt; " times match" &lt;&lt; std::endl;
 return a &gt; b ? a : b;
</code></pre>

<p>   }
   int times;
 };
```</p>

<p>同时我们可以声明一个函数对象</p>

<p><code>cpp
Max max;
std::function&lt;int(int, int)&gt; func = max;  //拷贝
max(1,3);
func(1, 3);
func = std::ref(max); //引用该对象
func(1, 3);
</code>
output:
<code>
Called 1 times match
Called 1 times match
Called 2 times match
</code></p>

<hr />

<h3>std::bind</h3>

<blockquote><p>用于绑定函数参数，返回函数对象</p></blockquote>

<h4>使用示例：</h4>

<p>``` cpp
 class Test
 {
 public:
   void print()
   {</p>

<pre><code> std::cout &lt;&lt; ++value &lt;&lt; std::endl;
</code></pre>

<p>   }
   void addX(int x);
   {</p>

<pre><code> value += x;
 std::cout &lt;&lt; value &lt;&lt; std::endl;
</code></pre>

<p>   }
 private:
   int value;
 }</p>

<p> Test test;
 std::function&lt;void()> func = std::bind(&amp;Test::print, test);  //test 传值
 test.print();  //  value is 1
 func();        //  value is 1
 func = std::bind(&amp;Test::print, &amp;test);    //传引用
 func();        //  value is 2
 test.print();  //  value is 3
 func = std::bind(&amp;Test::addX, &amp;test, 5);  //多参数绑定
 func();        //  value is 8
 test.print();  //  value is 9
 std::function&lt;void(int)> func1;
 func1 = std::bind(&amp;Test::addX, &amp;test, std::placeholders::_1);  //参数占位
 func1(4);      //  value is 13
 test.print();  //  value is 14
```</p>

<h4>原理描述</h4>

<p>bind普通函数</p>

<p><img src="/images/blog_images/bind_1.png" alt="" /></p>

<p>bind成员函数，如果绑定的是<code>*this</code>， 则内部调用时为<code>(v1.*fn)()</code></p>

<p><img src="/images/blog_images/bind_2.png" alt="" /></p>

<p>显式传递<code>this</code></p>

<p><img src="/images/blog_images/bind_3.png" alt="" /></p>

<p>占位预留参数</p>

<p><img src="/images/blog_images/bind_4.png" alt="" /></p>

<hr />

<h3>相关参考&amp;援引</h3>

<ol>
<li><a href="http://www.cprogramming.com/tutorial/function-pointers.html">函数指针</a></li>
<li><a href="http://www.cprogramming.com/tutorial/functors-function-objects-in-c++.html">函数对象</a></li>
<li><a href="http://stackoverflow.com/questions/6893285/why-do-all-these-crazy-function-pointer-definitions-all-work-what-is-really-goi">"&amp;" in ordinary functions pointer</a></li>
<li><a href="http://blog.think-async.com/2010/04/bind-illustrated.html">《bind illustrated》 --- Christopher M. Kohlhoff </a></li>
</ol>

]]></content>
  </entry>
  
</feed>
