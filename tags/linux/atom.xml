<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | 1Feng's Blog]]></title>
  <link href="http://1feng.github.io/tags/linux/atom.xml" rel="self"/>
  <link href="http://1feng.github.io/"/>
  <updated>2016-09-12T21:45:35+08:00</updated>
  <id>http://1feng.github.io/</id>
  <author>
    <name><![CDATA[Travis Swicegood]]></name>
    <email><![CDATA[codingforfan@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[linux cpu load]]></title>
    <link href="http://1feng.github.io/2016/05/05/linux-cpu-load/"/>
    <updated>2016-05-05T17:03:00+08:00</updated>
    <id>http://1feng.github.io/2016/05/05/linux-cpu-load</id>
    <content type="html"><![CDATA[<h4>简析</h4>

<p>工作一直是在linux环境下，经常通过top，uptime来查看当前机器的负载（load average）, 但是始终对这个概念比较模糊，无法描述清楚这个值所反馈的真实含义，抽时间读了网上的一些文章，简单做下笔记：</p>

<ul>
<li><strong>introduction</strong> ：例如 load average: 0.03, 0.05, 0.06 后面三个数字代表了过去1分钟，5分钟，15分钟的CPU平均负载；</li>
<li><strong>Threshold</strong> ：如果当前机器是一个N核CPU（grep 'model name' /proc/cpuinfo | wc -l），则load average的上限就是N，具体如下：

<ul>
<li>预警：0.7*N</li>
<li>上限：1.0*N</li>
<li>WTF：5.0*N</li>
</ul>
</li>
<li><strong>tips</strong> ：

<ul>
<li>1分钟，5分钟，15分钟三个参考数据，着重参考后两者即可，1分钟内如果超过1.0*N，并无大碍

<blockquote><p>以上来自互联网前辈们工程实践的总结</p></blockquote></li>
</ul>
</li>
</ul>


<h4>原理</h4>

<p>尝试看下kernel里是怎么计算load值的：</p>

<p><strong>定时计算</strong>
```cpp
// linux-2.6.32.68/kernel/timer.c
// jiffies记录了电脑开机到现在总共的时钟中断次数
// 如果系统的时钟频率是1000（由宏HZ设置），即1秒中断1000次，每1ms中断一次
// 我们暂时不管ticks到底是代表了几次中断，总之每个ticks周期，都会调用load的计算函数
void do_timer(unsigned long ticks)
{</p>

<pre><code>jiffies_64 += ticks;
update_wall_time();
calc_global_load();
</code></pre>

<p>}
// linux-2.6.32.68/kernel/sched.h
/<em>
 * These are the constant used to fake the fixed-point load-average
 * counting. Some notes:
 *  - 11 bit fractions expand to 22 bits by the multiplies: this gives
 *    a load-average precision of 10 bits integer + 11 bits fractional
 *  - if you want to count load-averages more often, you need more
 *    precision, or rounding will get you. With 2-second counting freq,
 *    the EXP_n values would be 1981, 2034 and 2043 if still using only
 *    11 bit fractions.
 </em>/
// 上述大意，是采用了10 bit整数 + 11 bits的分数的fixed-point形式来表示，并非通常的float-point</p>

<h1>define FSHIFT      11      /<em> nr of bits of precision </em>/</h1>

<h1>define FIXED_1     (1&lt;&lt;FSHIFT) /<em> 1.0 as fixed-point </em>/</h1>

<h1>define LOAD_FREQ   (5<em>HZ+1)    /</em> 5 sec intervals */</h1>

<h1>define EXP_1       1884        /<em> 1/exp(5sec/1min) as fixed-point </em>/</h1>

<h1>define EXP_5       2014        /<em> 1/exp(5sec/5min) </em>/</h1>

<h1>define EXP_15      2037        /<em> 1/exp(5sec/15min) </em>/</h1>

<p>// linux-2.6.32.68/kernel/sched.c
void calc_global_load(void)
{</p>

<pre><code>unsigned long upd = calc_load_update + 10; 
long active;

// 如果 jiffies 小于 upd，直接return
// 当前距离上次计算超过5 second + 10个ticks（如果HZ == 1000，即10ms）则触发计算
if (time_before(jiffies, upd)) 
    return;

active = atomic_long_read(&amp;calc_load_tasks);
active = active &gt; 0 ? active * FIXED_1 : 0;

// 直观上看，这三次计算分别对应的应该是1分钟，5分钟，15分钟三个load值
avenrun[0] = calc_load(avenrun[0], EXP_1, active);
avenrun[1] = calc_load(avenrun[1], EXP_5, active);
avenrun[2] = calc_load(avenrun[2], EXP_15, active);
// 计算完成后更新 cal_load_update
// LOAD_FREQ = 5HZ + 1  即约等于 5 seconds
// 其实cal_load_update指定了下次计算的时间点
calc_load_update += LOAD_FREQ;
</code></pre>

<p>}</p>

<p>static unsigned long
calc_load(unsigned long load, unsigned long exp, unsigned long active)
{</p>

<pre><code>load *= exp;
load += active * (FIXED_1 - exp); 
return load &gt;&gt; FSHIFT;
</code></pre>

<p>}
```
截至目前，我只知道了计算间隔约5秒钟
没看懂EXP_1，EXP_5, EXP_15，FSHIFT这几个magic number，冥冥中感觉前三个应该跟1分钟，5分钟，15分钟有关
active代表的又是什么？感觉像是指的active状态的task数量（最近刚读完<a href="http://pages.cs.wisc.edu/~remzi/OSTEP/#book-chapters">《Operating Systems: Three Easy Pieces》</a>）</p>

<p>追溯下 calc_load_task变量：</p>

<p>```cpp
// linux-2.6.32.68/kernel/sched.c
// 发现针对calc_load_task的删除操作
/<em>
 * remove the tasks which were accounted by rq from calc_load_tasks.
 </em>/
static void calc_global_load_remove(struct rq *rq)
{</p>

<pre><code>atomic_long_sub(rq-&gt;calc_load_active, &amp;calc_load_tasks);
rq-&gt;calc_load_active = 0;
</code></pre>

<p>}
// 发现针对calc_load_task的添加操作
/<em>    <br/>
 * Either called from update_cpu_load() or from a cpu going idle
 </em>/
// 更新calc_load_tasks动作，是在load的计算之后进行的
// do_timer()被调用之后又调用的update_process_times() -> calc_load_account_active() -> update_cpu_load() -> calc_load_account_active（）
// 但是calc_load_account_active（）也是每隔LOAD_FREQ执行一次，avg_load计算的是前一个LOAD_FREQ周期的数据，计算完了，然后calc_load_task再被更新 <br/>
static void calc_load_account_active(struct rq *this_rq)
{</p>

<pre><code>long nr_active, delta;

// 结合rq定义看，所谓 active 就是R，D类型的进程数
nr_active = this_rq-&gt;nr_running;
nr_active += (long) this_rq-&gt;nr_uninterruptible;

// 如果一个LOAD_FREQ周期内，nr_active数量有发生变化，则计算delta
if (nr_active != this_rq-&gt;calc_load_active) {
    // delta 是指当前一个LOAD_FREQ周期新增的R,D进程数
    delta = nr_active - this_rq-&gt;calc_load_active;
    this_rq-&gt;calc_load_active = nr_active;
    // 疑问：既然每次都加delta，calc_load_tasks 其实就等于nr_active嘛，直接atomic_long_set不就完了？？
    atomic_long_add(delta, &amp;calc_load_tasks);
}
</code></pre>

<p>}
// 查看 rq的定义: per-CPU runqueue data structure
/<em>
 * This is the main, per-CPU runqueue data structure.
 *
 * Locking rule: those places that want to lock multiple runqueues
 * (such as the load balancing or the thread migration code), lock
 * acquire operations must be ordered by ascending &amp;runqueue.
 </em>/
struct rq {</p>

<pre><code>...
/*
 * nr_running and cpu_load should be in the same cacheline because
 * remote CPUs use both these fields when doing load calculation.
 */
// 可运行的进程数量（进程状态以及含义可以自行google）-----状态码 R (TASK_RUNNING)
unsigned long nr_running;    // kernel里的number类型都以nr作为前缀
...
/*
 * This is part of a global counter where only the total sum
 * over all CPUs matters. A task can increase this counter on
 * one CPU and if it got migrated afterwards it may decrease
 * it on another CPU. Always updated under the runqueue lock:
 */
// 不可中断睡眠状态进程数-----状态码 D (TASK_UNINTERRUPTIBLE)
unsigned long nr_uninterruptible;
...
/* calc_load related fields */
unsigned long calc_load_update;
long calc_load_active;
</code></pre>

<p>}
```
再尝试看下avenrun数组内的数据都在哪里被使用了，最终是怎么输出到/proc/loadavg（uptime，top里的load数据都源于此文件）</p>

<p>```cpp
// linux-2.6.32.68/kernel/sched.c
/<em><em>
 * get_avenrun - get the load average array
 * @loads:  pointer to dest load array
 * @offset: offset to add
 * @shift:  shift count to shift the result left
 *
 * These values are estimates at best, so no need for locking.
 </em>/
void get_avenrun(unsigned long </em>loads, unsigned long offset, int shift)
{</p>

<pre><code>loads[0] = (avenrun[0] + offset) &lt;&lt; shift;
loads[1] = (avenrun[1] + offset) &lt;&lt; shift;
loads[2] = (avenrun[2] + offset) &lt;&lt; shift;
</code></pre>

<p>}</p>

<p>// linux-2.6.32.68/fs/proc/loadavg.c
// 从这两个宏可以看出，avnrun内元素，低11位为分数,高位是10进制的整数
// 其实之前FSHIFT处的注释就说过了'fixed-point' &amp;&amp; '10 bits integer + 11 bits fractional'</p>

<h1>define LOAD_INT(x) ((x) >> FSHIFT)</h1>

<h1>define LOAD_FRAC(x) LOAD_INT(((x) &amp; (FIXED_1-1)) * 100)</h1>

<p>static int loadavg_proc_show(struct seq_file <em>m, void </em>v)
{</p>

<pre><code>unsigned long avnrun[3];

get_avenrun(avnrun, FIXED_1/200, 0); 

// 看输出格式，应该就是/proc/loadavg内的数据无疑
seq_printf(m, "%lu.%02lu %lu.%02lu %lu.%02lu %ld/%d %d\n",
    LOAD_INT(avnrun[0]), LOAD_FRAC(avnrun[0]),
    LOAD_INT(avnrun[1]), LOAD_FRAC(avnrun[1]),
    LOAD_INT(avnrun[2]), LOAD_FRAC(avnrun[2]),
    nr_running(), nr_threads,
    task_active_pid_ns(current)-&gt;last_pid);
return 0;
</code></pre>

<p>}
```
以上，我们知道了load计算其实只是利用了cpu 当前的R，D状态的进程数，仍旧未解的问题：</p>

<blockquote><ol>
<li>calc_load_tasks 存放的竟然是当前的R,D状态的进程数，更新周期为LOAD_FREQ，那究竟是如何计算出过去1,5,15分钟的平均load的，load的计算具体公式是什么？</li>
<li>具体的那几个magic number到底什么含义？</li>
</ol>
</blockquote>

<p>通过kernel代码里calc_load()的实现，可以看到在计算当前load的时候，变量只有active，公式 ：</p>

<pre><code>load(N) = (load(N-1)*EXP + active*(2^11 - EXP) )/ 2^11
</code></pre>

<p>很明显这不是朴素的平均数计算方法，奈何统计学学的实在不咋滴，思考良久依旧不知所以。</p>

<p>回想下朴素的计算方式，考虑目前我们可以做到5秒统计一次当前的active tasks数量，那么如果是我自己来实现，统计过去1分钟的平均值，我会进行如下设计：
<img src="/images/blog_images/cpu_load.png" alt="" /></p>

<p>用长度12（60 s / 5s = 12）的链表来存储，每个周期（5s）,会在首部添加一个节点，记录当前的active tasks数量，并删除尾端的节点；整个链表则可以随时用来计算过去的1分钟，active tasks的平均数量，即avg_load = count(list_node)/12
但是，每次更新都有一次插入，一次删除，而且需要进行加锁操作，在kernel里这样实现应该不是一个好的方案，另外还需要了解的一点就是处于性能的考虑kernel里不支持浮点数操作</p>

<p>最后不断google，发现了<a href="http://www.teamquest.com/files/9214/2049/9761/ldavg1.pdf">《UNIX Load Average Part 1》</a> , 同样是解析load，写的比我详细，并且对magic number做了详细解释，文中指出此处计算的是 <strong><em>exponentially-damped moving averages</em></strong>，这也只是<a href="https://en.wikipedia.org/wiki/Moving_average">moving averages</a>的一种计算方式（冥冥之中感觉这种计算方法应用很广啊，例如流式数据朴素的平均数计算相当浪费内存，如果也可以这样……，果然数学优化比工程优化要牛逼的多啊）。</p>

<h4>总结:</h4>

<p><strong>Load average 其实就是任务队列的长度（TASK_RUNNING, TASK_UNINTERRUPTIBLE进程的数量）的MOVING AVERAGES</strong></p>

<blockquote><p>很显然，TASK_UNINTERRUPTIBLE状态的进程数量如果增多，也会引起load average 增高，但是TASK_UNINTERRUPTIBLE状态的进程并没有在消耗CPU，例如可能是在做IO 等待等，所以load 如果短时升高，也没有问题；同样，如果长时间很高，也有可能是磁盘IO负载较高引起的。</p>

<p>load 其实没有一个纸面上的阈值，只能凭借对操作系统知识的了解，以及工作场景等实际经验来判断load的含义，其值也只是用来发现问题，而不是解释问题的，如果发现load过高，还是需要在实际场景上去寻找问题原因，进行针对性优化</p></blockquote>

<hr />

<p><strong>参考资料：</strong></p>

<ol>
<li><a href="http://www.linfo.org/process_state.html">Process State Definition</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt">CFS Scheduler</a></li>
<li><a href="http://www.linuxjournal.com/article/9001?page=0,1">Examining Load Average</a></li>
<li><a href="http://dbanotes.net/arch/unix_linux_load.html">Unix/Linux 的 Load 初级解释 </a></li>
<li><a href="http://blog.scoutapp.com/articles/2009/07/31/understanding-load-averages">Understanding linux cpu load - when should you be worried?</a></li>
<li><a href="http://www.teamquest.com/files/9214/2049/9761/ldavg1.pdf">UNIX Load Average Part 1: How It Works</a></li>
<li><a href="http://www.teamquest.com/files/6714/2049/9760/ldavg2.pdf">UNIX Load Average Part 2: Not Your Average Average</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何实现一个daemon]]></title>
    <link href="http://1feng.github.io/2014/11/29/daemon-ho-to/"/>
    <updated>2014-11-29T16:46:00+08:00</updated>
    <id>http://1feng.github.io/2014/11/29/daemon-ho-to</id>
    <content type="html"><![CDATA[<p>Linux下经常需要将服务程序实现为<strong>daemon</strong>（<strong>守护进程</strong>）。从而完成后台运行，开机启动，关机正常结束的功能。</p>

<hr />

<h3>需求：</h3>

<ul>
<li><strong>后台运行</strong> ：摆脱tty控制</li>
<li><strong>根目录运行</strong> ：切换工作目录至(/)，防止机器重启工作目录处于Unmount状态，导致进程无法正常工作</li>
<li><strong>标准io重定向</strong> ：重定向stdin,stdout,stderr</li>
<li><strong>文件创建模式</strong> ：提高创建文件权限</li>
<li><strong>屏蔽/接管信号</strong> ： 屏蔽或者接管部分signals处理</li>
<li><strong>Single instance</strong> ： 可选</li>
<li><strong>开机启动</strong> ：可选</li>
</ul>


<h3>How to:</h3>

<h4>修改文件创建模式屏蔽字</h4>

<ul>
<li>umask(0) : 将文件创建模式屏蔽字设置为0</li>
</ul>


<h4>摆脱tty</h4>

<ul>
<li>fork 并退出父进程（子进程不是session leader，为setsid创造条件）</li>
<li>调用setsid，使子进程成为session leader，同时成为一个process group leader，此时已摆脱tty</li>
<li>再次fork，并退出父进程，摆脱session leader，从而避免进程取得tty控制权限。（如果每次open /dev/tty* 的时候都使用O_NOCTTY, 则该步骤可以取消）</li>
</ul>


<h4>写并锁定pidfile</h4>

<ul>
<li>锁定pidfile，并将pid写入pidfile，如果pidfile已经存在，说明实例已经启动</li>
</ul>


<h4>切换目录</h4>

<ul>
<li>cddir("/")</li>
</ul>


<h4>屏蔽signals</h4>

<p>－ 屏蔽或者后续自己写代码处理相应signals(nohup 无法完成该任务)</p>

<h4>重定向标准io</h4>

<ul>
<li>可以选择关闭或者重定向标准io到指定文件</li>
</ul>


<h4>开机启动</h4>

<ul>
<li>参考/etc/init.d/skeleton 实现启动/停止脚本, 并使用update-rc.d添加为启动项</li>
</ul>


<h3>Code example:</h3>

<p>``` cpp</p>

<p> bool DaemonInit()
 {</p>

<pre><code>/* Our process ID and Session ID */
pid_t pid, sid;

/* Change the file mode mask */
umask(0);

/* Fork off the parent process */
pid = fork();
if (pid &lt; 0)
{
    std::cerr &lt;&lt; "First fock failed!" &lt;&lt; std::endl;;
    return false;
}
/* If we got a good PID, then
 * we can exit the parent process. */
if (pid &gt; 0)
{
    sleep(1);
    exit(EXIT_SUCCESS);
}

/* Create a new SID for the child process */
sid = setsid();
if (sid &lt; 0)
{
    std::cerr &lt;&lt; "Setsid failed!" &lt;&lt; std::endl;;
    return false;
}

/* Fork off the second time */
pid = fork();
if (pid &lt; 0)
{
    std::cerr &lt;&lt; "Second fork failed!" &lt;&lt; std::endl;;
    return false;
}
/* If we got a good PID, then
 * we can exit the parent process. */
if (pid &gt; 0)
{
    exit(EXIT_SUCCESS);
}

/* Ignore signals */
signal(SIGCHLD, SIG_IGN);
signal(SIGHUP, SIG_IGN);

 /* Change the current working directory */
if ((chdir("/")) &lt; 0) {
  return false;
}

//需保证 pid_fd 生命周期与进程生命周期一致
int pid_fd = open("/var/run/daemon_example.pid", O_RDWR|O_CREAT, 0640);
if ( pid_fd &lt; 0)
{
    //std::cerr &lt;&lt; "Can not open " &lt;&lt; pidfile_ &lt;&lt; std::endl;
    return false;
}
if (lockf(fd_, F_TLOCK, 0) &lt; 0)
{
    //std::cerr &lt;&lt; "Another instance is running!" &lt;&lt; std::endl;;
    return false;
}
/*write and lock pid file*/
std::stringstream stream;
stream &lt;&lt; getpid() &lt;&lt; '\n';
std::string pidstr = stream.str();
ssize_t len = write(fd_, pidstr.c_str(), pidstr.length());
if(len &lt; 0)
{
    //std::cerr &lt;&lt; "Write to /var/run/daemon_example.pid failed!"
    //          &lt;&lt; std::endl;;
    return false;
}

/* Close out the standard file descriptors */
if(close(STDIN_FILENO) == -1)
{
    //std::cerr &lt;&lt; "Can not close STDIN_FILENO!" &lt;&lt; std::endl;
    return false;
}
if(close(STDOUT_FILENO) == -1)
{
    //std::cerr &lt;&lt; "Can not close STDOUT_FILENO!" &lt;&lt; std::endl;
    return false;
}
if(close(STDERR_FILENO)  == -1)
{
    //std::cerr &lt;&lt; "Can not close STDERR_FILENO!" &lt;&lt; std::endl;
    return false;
}
/*redirect standard output*/
//需保证 output_fd 生命周期与进程生命周期一致
int output_fd = open(DEV_NULL, O_RDWR, 0);
if(output_fd == -1)
{
  return false;
}
if(dup2(output_fd, STDIN_FILENO) == -1)
{
  return false;
}
if(dup2(output_fd, STDOUT_FILENO) == -1)
{
  return false;
}
if(dup2(output_fd, STDERR_FILENO) == -1)
{
  return false;
}
return true;
</code></pre>

<p>}
```</p>

<h3>参考</h3>

<ol>
<li><a href="http://www.apuebook.com/">《APUE》 Chapter 13</a></li>
<li><a href="http://netzmafia.de/skripten/unix/linux-daemon-howto.html">Daemon how to</a></li>
<li><a href="https://stackoverflow.com/questions/17954432/creting-a-daemon-in-linux">Creating a daemon in Linux</a></li>
<li><a href="https://stackoverflow.com/questions/958249/whats-the-difference-between-nohup-and-a-daemon">What's the difference between nohup and a daemon?</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
